// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3SwC2F4BeXucfS9cpFbd24
// Component: TzSKfCEIuj
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_landing_kit.module.css"; // plasmic-import: 3SwC2F4BeXucfS9cpFbd24/projectcss
import * as sty from "./PlasmicIconCategory.module.css"; // plasmic-import: TzSKfCEIuj/css
import Icon25Icon from "./icons/PlasmicIcon__Icon25"; // plasmic-import: 4-rt81qQUT/icon

export const PlasmicIconCategory__VariantProps = new Array();

export const PlasmicIconCategory__ArgProps = new Array("children");

function PlasmicIconCategory__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"box"}
        data-plasmic-override={overrides.box}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <Icon25Icon
                className={classNames(defaultcss.all, sty.svg__fkFkn)}
                role={"img"}
              />

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__ttQog
                )}
              >
                {"New arrivals"}
              </div>
            </React.Fragment>
          ),

          value: args.children
        })}
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "box"],
  box: ["box"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicIconCategory__ArgProps,
      internalVariantPropNames: PlasmicIconCategory__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicIconCategory__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIconCategory";
  } else {
    func.displayName = `PlasmicIconCategory.${nodeName}`;
  }
  return func;
}

export const PlasmicIconCategory = Object.assign(
  // Top-level PlasmicIconCategory renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    box: makeNodeComponent("box"),
    // Metadata about props expected for PlasmicIconCategory
    internalVariantProps: PlasmicIconCategory__VariantProps,
    internalArgProps: PlasmicIconCategory__ArgProps
  }
);

export default PlasmicIconCategory;
/* prettier-ignore-end */
