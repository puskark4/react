// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3SwC2F4BeXucfS9cpFbd24
// Component: sZ2hF1JP9pZ
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Valueprop from "../../Valueprop"; // plasmic-import: YnVQB3eyyN/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_landing_kit.module.css"; // plasmic-import: 3SwC2F4BeXucfS9cpFbd24/projectcss
import * as sty from "./PlasmicValuesSection1.module.css"; // plasmic-import: sZ2hF1JP9pZ/css
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: TtwEVZJGO9/icon
import Icon13Icon from "./icons/PlasmicIcon__Icon13"; // plasmic-import: fbVVqxutSY/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: RRGTJB8DSY/icon
import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: 0JrDb5qYXM/icon

export const PlasmicValuesSection1__VariantProps = new Array();

export const PlasmicValuesSection1__ArgProps = new Array(
  "foreground",
  "foreground2"
);

function PlasmicValuesSection1__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"foreground"}
        data-plasmic-override={overrides.foreground}
        hasGap={true}
        className={classNames(defaultcss.all, sty.foreground)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__oPpzU
                )}
              >
                {"Values"}
              </div>

              <h2
                className={classNames(
                  defaultcss.h2,
                  defaultcss.__wab_text,
                  sty.h2__kNf
                )}
              >
                {"Not just another design"}
              </h2>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__miLf2
                )}
              >
                {
                  "A euismod eros a hendrerit tristique suscipit sit aptent dolor adipiscing inceptos cras ullamcorper a vivamus parturient."
                }
              </div>
            </React.Fragment>
          ),

          value: args.foreground
        })}
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"foreground2"}
        data-plasmic-override={overrides.foreground2}
        hasGap={true}
        className={classNames(defaultcss.all, sty.foreground2)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__ezU2)}
              >
                <Valueprop
                  className={classNames("__wab_instance", sty.valueprop__kYJg2)}
                  slot={
                    "Orci commodo maecenas fringilla ad nec amet tempus mattis platea eget tortor sit dolor etiam a ullamcorper varius."
                  }
                  slot2={
                    <Icon8Icon
                      className={classNames(defaultcss.all, sty.svg__cmzQz)}
                      role={"img"}
                    />
                  }
                >
                  {"Welcoming atmosphere"}
                </Valueprop>

                <Valueprop
                  className={classNames(
                    "__wab_instance",
                    sty.valueprop___8K7X6
                  )}
                  slot={
                    "Feugiat sapien ornare vivamus bibendum a ullamcorper feugiat faucibus feugiat blandit a per imperdiet dapibus metus ut scelerisque sagittis felis nostra per accumsan rutrum."
                  }
                  slot2={
                    <Icon13Icon
                      className={classNames(defaultcss.all, sty.svg__rIYqm)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__glw3E
                    )}
                  >
                    {"Tested and secure"}
                  </div>
                </Valueprop>
              </p.Stack>

              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__inToo)}
              >
                <Valueprop
                  className={classNames(
                    "__wab_instance",
                    sty.valueprop___0Pf3H
                  )}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__gDuK
                      )}
                    >
                      {
                        "Porttitor feugiat a scelerisque nullam parturient vestibulum tempor a litora suscipit arcu potenti varius venenatis venenatis dapibus fames adipiscing in in taciti."
                      }
                    </div>
                  }
                  slot2={
                    <Icon10Icon
                      className={classNames(defaultcss.all, sty.svg__w5S08)}
                      role={"img"}
                    />
                  }
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__p5Gmf
                    )}
                  >
                    {"Mindful notifications"}
                  </div>
                </Valueprop>

                <Valueprop
                  className={classNames("__wab_instance", sty.valueprop__kueku)}
                  slot={
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__qYvPh
                      )}
                    >
                      {
                        "Scelerisque facilisi at class a inceptos mi aliquet vestibulum taciti platea amet litora quisque mus parturient a mauris arcu."
                      }
                    </div>
                  }
                  slot2={
                    <Icon11Icon
                      className={classNames(defaultcss.all, sty.svg__sCpo)}
                      role={"img"}
                    />
                  }
                >
                  {"Real-time results"}
                </Valueprop>
              </p.Stack>
            </React.Fragment>
          ),

          value: args.foreground2
        })}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "foreground", "foreground2"],
  foreground: ["foreground"],
  foreground2: ["foreground2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicValuesSection1__ArgProps,
      internalVariantPropNames: PlasmicValuesSection1__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicValuesSection1__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValuesSection1";
  } else {
    func.displayName = `PlasmicValuesSection1.${nodeName}`;
  }
  return func;
}

export const PlasmicValuesSection1 = Object.assign(
  // Top-level PlasmicValuesSection1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground: makeNodeComponent("foreground"),
    foreground2: makeNodeComponent("foreground2"),
    // Metadata about props expected for PlasmicValuesSection1
    internalVariantProps: PlasmicValuesSection1__VariantProps,
    internalArgProps: PlasmicValuesSection1__ArgProps
  }
);

export default PlasmicValuesSection1;
/* prettier-ignore-end */
