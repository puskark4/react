// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3SwC2F4BeXucfS9cpFbd24
// Component: 18w6Cg8-8R8
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import Valueprop from "../../Valueprop"; // plasmic-import: YnVQB3eyyN/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_landing_kit.module.css"; // plasmic-import: 3SwC2F4BeXucfS9cpFbd24/projectcss
import * as sty from "./PlasmicValuesSection5.module.css"; // plasmic-import: 18w6Cg8-8R8/css

export const PlasmicValuesSection5__VariantProps = new Array();

export const PlasmicValuesSection5__ArgProps = new Array(
  "foreground",
  "foreground2"
);

function PlasmicValuesSection5__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"foreground"}
        data-plasmic-override={overrides.foreground}
        hasGap={true}
        className={classNames(defaultcss.all, sty.foreground)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__uLqY6
                )}
              >
                {"Values"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__tq0WL
                )}
              >
                {"Fruitful and fun"}
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__bb8Fr
                )}
              >
                {
                  "A euismod eros a hendrerit tristique suscipit sit aptent dolor adipiscing inceptos cras ullamcorper a vivamus parturient."
                }
              </div>
            </React.Fragment>
          ),

          value: args.foreground
        })}
      </p.Stack>

      <p.Stack
        as={"div"}
        data-plasmic-name={"foreground2"}
        data-plasmic-override={overrides.foreground2}
        hasGap={true}
        className={classNames(defaultcss.all, sty.foreground2)}
      >
        {p.renderPlasmicSlot({
          defaultContents: (
            <React.Fragment>
              <Valueprop
                card={"card"}
                className={classNames("__wab_instance", sty.valueprop___40GhN)}
                flatIcon={"flatIcon"}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__iaMc0
                    )}
                  >
                    {
                      "Pharetra nulla ac adipiscing fringilla vel ridiculus interdum."
                    }
                  </div>
                }
              >
                {"Accomplish more"}
              </Valueprop>

              <Valueprop
                card={"card"}
                className={classNames("__wab_instance", sty.valueprop__mcYlo)}
                flatIcon={"flatIcon"}
                slot={
                  "Consectetur faucibus nascetur scelerisque a sociis amet a maecenas facilisi fermentum integer."
                }
                slot2={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__yN6I)}
                    role={"img"}
                    src={
                      "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/banana_1f34c.png"
                    }
                  />
                }
              >
                {"Best-in-class"}
              </Valueprop>

              <Valueprop
                card={"card"}
                className={classNames("__wab_instance", sty.valueprop__luRj3)}
                flatIcon={"flatIcon"}
                slot={
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box___32I9J
                    )}
                  >
                    {"Nisi quisque natoque integer per a tempus faucibus."}
                  </div>
                }
                slot2={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img___7J9HT)}
                    role={"img"}
                    src={
                      "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/cherries_1f352.png"
                    }
                  />
                }
              >
                {"Championship award-winners"}
              </Valueprop>

              <Valueprop
                card={"card"}
                className={classNames("__wab_instance", sty.valueprop___76Xz4)}
                flatIcon={"flatIcon"}
                slot={
                  "Vel suspendisse arcu parturient cubilia enim mus massa consequat eu a tempor."
                }
                slot2={
                  <img
                    alt={""}
                    className={classNames(defaultcss.img, sty.img__wMaGr)}
                    role={"img"}
                    src={
                      "https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/144/twitter/281/doughnut_1f369.png"
                    }
                  />
                }
              >
                <div
                  className={classNames(
                    defaultcss.all,
                    defaultcss.__wab_text,
                    sty.box__xwCc
                  )}
                >
                  {"Destined for greatness"}
                </div>
              </Valueprop>
            </React.Fragment>
          ),

          value: args.foreground2
        })}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "foreground", "foreground2"],
  foreground: ["foreground"],
  foreground2: ["foreground2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicValuesSection5__ArgProps,
      internalVariantPropNames: PlasmicValuesSection5__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicValuesSection5__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicValuesSection5";
  } else {
    func.displayName = `PlasmicValuesSection5.${nodeName}`;
  }
  return func;
}

export const PlasmicValuesSection5 = Object.assign(
  // Top-level PlasmicValuesSection5 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    foreground: makeNodeComponent("foreground"),
    foreground2: makeNodeComponent("foreground2"),
    // Metadata about props expected for PlasmicValuesSection5
    internalVariantProps: PlasmicValuesSection5__VariantProps,
    internalArgProps: PlasmicValuesSection5__ArgProps
  }
);

export default PlasmicValuesSection5;
/* prettier-ignore-end */
