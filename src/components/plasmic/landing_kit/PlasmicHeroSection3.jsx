// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3SwC2F4BeXucfS9cpFbd24
// Component: 6sL1mv-UpYN
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navigation from "../../Navigation"; // plasmic-import: QL_hAqdWKc/component
import Button from "../../Button"; // plasmic-import: QaipWgLIw8/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: K7Rqgqmh9OYf/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_landing_kit.module.css"; // plasmic-import: 3SwC2F4BeXucfS9cpFbd24/projectcss
import * as sty from "./PlasmicHeroSection3.module.css"; // plasmic-import: 6sL1mv-UpYN/css
import image13XpI2S7PCl2 from "./images/image13.svg"; // plasmic-import: XpI2S7pCl2/picture

export const PlasmicHeroSection3__VariantProps = new Array();

export const PlasmicHeroSection3__ArgProps = new Array("children");

function PlasmicHeroSection3__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Navigation
        data-plasmic-name={"navigation"}
        data-plasmic-override={overrides.navigation}
        centered={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? undefined
            : "centered"
        }
        className={classNames("__wab_instance", sty.navigation)}
        lightBg={"lightBg"}
      >
        <img
          alt={""}
          className={classNames(defaultcss.img, sty.img__j0Qcj)}
          role={"img"}
          src={image13XpI2S7PCl2}
        />
      </Navigation>

      <div className={classNames(defaultcss.all, sty.box__bhbYc)}>
        <img
          alt={""}
          className={classNames(defaultcss.img, sty.img__gkzYw)}
          role={"img"}
          src={
            "https://images.squarespace-cdn.com/content/v1/5ca28b6c34c4e276b1e6efdc/1567338274582-V6V9R741A6IIIJREYX4K/ke17ZwdGBToddI8pDm48kLkXF2pIyv_F2eUT9F60jBl7gQa3H78H3Y0txjaiv_0fDoOvxcdMmMKkDsyUqMSsMWxHk725yiiHCCLfrh8O1z4YTzHvnKhyp6Da-NYroOW3ZGjoBKy3azqku80C789l0iyqMbMesKd95J-X4EagrgU9L3Sa3U8cogeb0tjXbfawd0urKshkc5MgdBeJmALQKw/image-asset.jpeg?format=2500w"
          }
        />

        <div className={classNames(defaultcss.all, sty.box__gtEe)} />

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__xnbTi)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__fQZP)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__agBt)}
                  >
                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box__gdH2T
                      )}
                    >
                      <span>
                        <React.Fragment>
                          {"Designs that inspire "}
                        </React.Fragment>
                        <span style={{ fontStyle: "italic" }}>{"and"}</span>
                        <React.Fragment>{" communicate"}</React.Fragment>
                      </span>
                    </div>

                    <div
                      className={classNames(
                        defaultcss.all,
                        defaultcss.__wab_text,
                        sty.box___4HZuN
                      )}
                    >
                      {
                        "Maecenas hendrerit dolor orci diam odio quam vestibulum suspendisse accumsan a facilisi arcu eu integer bibendum ridiculus feugiat a non sed."
                      }
                    </div>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(defaultcss.all, sty.box__lxjRd)}
                  >
                    <Button
                      className={classNames(
                        "__wab_instance",
                        sty.button__tsIwn
                      )}
                      darkGray={"darkGray"}
                      round={"round"}
                      slot={"Start now ->"}
                    />

                    <Button
                      bgDifference={"bgDifference"}
                      className={classNames(
                        "__wab_instance",
                        sty.button__zvVBv
                      )}
                      darkGray={"darkGray"}
                      slot={
                        <div
                          className={classNames(
                            defaultcss.all,
                            defaultcss.__wab_text,
                            sty.box__fOhhI
                          )}
                        >
                          {"Learn moreâ€¦"}
                        </div>
                      }
                    />
                  </p.Stack>
                </p.Stack>

                <div className={classNames(defaultcss.all, sty.box__r63L)}>
                  <div className={classNames(defaultcss.all, sty.box___0Gu1)} />
                </div>
              </React.Fragment>
            ),

            value: args.children
          })}
        </p.Stack>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "navigation"],
  navigation: ["navigation"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroSection3__ArgProps,
      internalVariantPropNames: PlasmicHeroSection3__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHeroSection3__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroSection3";
  } else {
    func.displayName = `PlasmicHeroSection3.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroSection3 = Object.assign(
  // Top-level PlasmicHeroSection3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigation: makeNodeComponent("navigation"),
    // Metadata about props expected for PlasmicHeroSection3
    internalVariantProps: PlasmicHeroSection3__VariantProps,
    internalArgProps: PlasmicHeroSection3__ArgProps
  }
);

export default PlasmicHeroSection3;
/* prettier-ignore-end */
