// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3SwC2F4BeXucfS9cpFbd24
// Component: Rjx0SznpO8x
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Navigation from "../../Navigation"; // plasmic-import: QL_hAqdWKc/component
import Button from "../../Button"; // plasmic-import: QaipWgLIw8/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: K7Rqgqmh9OYf/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_landing_kit.module.css"; // plasmic-import: 3SwC2F4BeXucfS9cpFbd24/projectcss
import * as sty from "./PlasmicHeroSection1.module.css"; // plasmic-import: Rjx0SznpO8x/css
import image262Yribcd4Re from "./images/image26.svg"; // plasmic-import: 2Yribcd4Re/picture

export const PlasmicHeroSection1__VariantProps = new Array();

export const PlasmicHeroSection1__ArgProps = new Array("foreground2");

function PlasmicHeroSection1__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <Navigation
        data-plasmic-name={"navigation"}
        data-plasmic-override={overrides.navigation}
        centered={
          hasVariant(globalVariants, "screen", "mobileOnly")
            ? undefined
            : "centered"
        }
        className={classNames("__wab_instance", sty.navigation)}
        dark={"dark"}
      >
        <img
          alt={""}
          className={classNames(defaultcss.img, sty.img__pzZMh)}
          role={"img"}
          src={image262Yribcd4Re}
        />
      </Navigation>

      <div
        data-plasmic-name={"hero2"}
        data-plasmic-override={overrides.hero2}
        className={classNames(defaultcss.all, sty.hero2)}
      >
        <img
          alt={""}
          className={classNames(defaultcss.img, sty.img__e41N2)}
          role={"img"}
          src={
            "https://images.unsplash.com/3/doctype-hi-res.jpg?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1346&q=80"
          }
        />

        <div
          data-plasmic-name={"background4"}
          data-plasmic-override={overrides.background4}
          className={classNames(defaultcss.all, sty.background4)}
        />

        <p.Stack
          as={"div"}
          data-plasmic-name={"foreground2"}
          data-plasmic-override={overrides.foreground2}
          hasGap={true}
          className={classNames(defaultcss.all, sty.foreground2)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__j3N6G)}
                >
                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__pxjn
                    )}
                  >
                    <span>
                      <React.Fragment>{"Designs that "}</React.Fragment>
                      <span style={{ textDecoration: "underline" }}>
                        {"scale"}
                      </span>
                    </span>
                  </div>

                  <div
                    className={classNames(
                      defaultcss.all,
                      defaultcss.__wab_text,
                      sty.box__irM2H
                    )}
                  >
                    {
                      "Orci dui condimentum rutrum laoreet hac purus porta sem sem a vivamus a posuere vel molestie."
                    }
                  </div>
                </p.Stack>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__fmxH5)}
                >
                  <Button
                    className={classNames("__wab_instance", sty.button__z0VsH)}
                    darkGray={"darkGray"}
                    slot={"Start now ->"}
                  />

                  <Button
                    bgDifference={"bgDifference"}
                    className={classNames("__wab_instance", sty.button__doFo6)}
                    darkGray={"darkGray"}
                    slot={
                      <div
                        className={classNames(
                          defaultcss.all,
                          defaultcss.__wab_text,
                          sty.box__ovUnL
                        )}
                      >
                        {"Learn moreâ€¦"}
                      </div>
                    }
                  />
                </p.Stack>
              </React.Fragment>
            ),

            value: args.foreground2
          })}
        </p.Stack>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "navigation", "hero2", "background4", "foreground2"],
  navigation: ["navigation"],
  hero2: ["hero2", "background4", "foreground2"],
  background4: ["background4"],
  foreground2: ["foreground2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHeroSection1__ArgProps,
      internalVariantPropNames: PlasmicHeroSection1__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicHeroSection1__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroSection1";
  } else {
    func.displayName = `PlasmicHeroSection1.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroSection1 = Object.assign(
  // Top-level PlasmicHeroSection1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigation: makeNodeComponent("navigation"),
    hero2: makeNodeComponent("hero2"),
    background4: makeNodeComponent("background4"),
    foreground2: makeNodeComponent("foreground2"),
    // Metadata about props expected for PlasmicHeroSection1
    internalVariantProps: PlasmicHeroSection1__VariantProps,
    internalArgProps: PlasmicHeroSection1__ArgProps
  }
);

export default PlasmicHeroSection1;
/* prettier-ignore-end */
