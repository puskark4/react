// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3SwC2F4BeXucfS9cpFbd24
// Component: DRp_-yK5MNO
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: QaipWgLIw8/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: K7Rqgqmh9OYf/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_landing_kit.module.css"; // plasmic-import: 3SwC2F4BeXucfS9cpFbd24/projectcss
import * as sty from "./PlasmicCallToActionSection3.module.css"; // plasmic-import: DRp_-yK5MNO/css

export const PlasmicCallToActionSection3__VariantProps = new Array();

export const PlasmicCallToActionSection3__ArgProps = new Array();

function PlasmicCallToActionSection3__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div className={classNames(defaultcss.all, sty.box___15LEk)} />

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__eEm2X)}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__ubsBh)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__dKYbG
            )}
          >
            {"Let's get going"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__ssqew
            )}
          >
            {
              "Orci dui condimentum rutrum laoreet hac purus porta sem sem a vivamus a posuere vel molestie."
            }
          </div>
        </p.Stack>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__tbvfj)}
        >
          <Button
            className={classNames("__wab_instance", sty.button__snAvc)}
            darkGray={"darkGray"}
            slot={"Start now ->"}
          />

          <Button
            bgDifference={"bgDifference"}
            className={classNames("__wab_instance", sty.button__vbL9Z)}
            darkGray={"darkGray"}
            slot={
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__tyZFy
                )}
              >
                {"Learn moreâ€¦"}
              </div>
            }
          />
        </p.Stack>
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicCallToActionSection3__ArgProps,
      internalVariantPropNames: PlasmicCallToActionSection3__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicCallToActionSection3__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCallToActionSection3";
  } else {
    func.displayName = `PlasmicCallToActionSection3.${nodeName}`;
  }
  return func;
}

export const PlasmicCallToActionSection3 = Object.assign(
  // Top-level PlasmicCallToActionSection3 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicCallToActionSection3
    internalVariantProps: PlasmicCallToActionSection3__VariantProps,
    internalArgProps: PlasmicCallToActionSection3__ArgProps
  }
);

export default PlasmicCallToActionSection3;
/* prettier-ignore-end */
