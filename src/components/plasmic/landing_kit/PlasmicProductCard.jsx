// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 3SwC2F4BeXucfS9cpFbd24
// Component: aXvFg-kEwT
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Tag from "../../Tag"; // plasmic-import: dCWwOvecYH/component
import Price from "../../Price"; // plasmic-import: -ltGw8pif2/component
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: K7Rqgqmh9OYf/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_landing_kit.module.css"; // plasmic-import: 3SwC2F4BeXucfS9cpFbd24/projectcss
import * as sty from "./PlasmicProductCard.module.css"; // plasmic-import: aXvFg-kEwT/css
import Icon34Icon from "./icons/PlasmicIcon__Icon34"; // plasmic-import: tdKqYMCNPy/icon

export const PlasmicProductCard__VariantProps = new Array("horizontal");

export const PlasmicProductCard__ArgProps = new Array(
  "children",
  "slot",
  "slot2",
  "slot3"
);

function PlasmicProductCard__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__horizontal]: hasVariant(variants, "horizontal", "horizontal")
      })}
    >
      <div
        className={classNames(defaultcss.all, sty.box___42Bl6, {
          [sty.box__horizontal___42Bl6Rwdik]: hasVariant(
            variants,
            "horizontal",
            "horizontal"
          )
        })}
      >
        <div
          className={classNames(defaultcss.all, sty.box___7Axdk, {
            [sty.box__horizontal___7Axdkrwdik]: hasVariant(
              variants,
              "horizontal",
              "horizontal"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: "30% off",
            value: args.children,
            className: classNames(sty.slotChildren)
          })}
        </div>

        <div
          className={classNames(defaultcss.all, sty.box___6Wjxv, {
            [sty.box__horizontal___6WjxvRwdik]: hasVariant(
              variants,
              "horizontal",
              "horizontal"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Icon34Icon
                className={classNames(defaultcss.all, sty.svg__yqh1A)}
                role={"img"}
              />
            ),

            value: args.slot
          })}
        </div>

        {p.renderPlasmicSlot({
          defaultContents: (
            <img
              alt={""}
              className={classNames(defaultcss.img, sty.img__q9B47)}
              role={"img"}
              src={
                "https://static.nike.com/a/images/c_limit,w_592,f_auto/t_product_v1/39b03dc1-5d7d-4fff-8629-38ccbae60273/react-infinity-run-flyknit-2-mens-running-shoe-8XGSrl.png"
              }
            />
          ),

          value: args.slot3
        })}

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box___8MxJq, {
            [sty.box__horizontal___8MxJqrwdik]: hasVariant(
              variants,
              "horizontal",
              "horizontal"
            )
          })}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <React.Fragment>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(defaultcss.all, sty.box__k1HYk)}
                >
                  <Tag
                    className={classNames("__wab_instance", sty.tag__wXkuC)}
                  />
                </p.Stack>

                <h3
                  className={classNames(
                    defaultcss.h3,
                    defaultcss.__wab_text,
                    sty.h3___5I2Ra
                  )}
                >
                  {"Men's running shoes"}
                </h3>

                <Price
                  className={classNames("__wab_instance", sty.price__ozshp)}
                />
              </React.Fragment>
            ),

            value: args.slot2
          })}
        </p.Stack>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicProductCard__ArgProps,
      internalVariantPropNames: PlasmicProductCard__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicProductCard__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicProductCard";
  } else {
    func.displayName = `PlasmicProductCard.${nodeName}`;
  }
  return func;
}

export const PlasmicProductCard = Object.assign(
  // Top-level PlasmicProductCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicProductCard
    internalVariantProps: PlasmicProductCard__VariantProps,
    internalArgProps: PlasmicProductCard__ArgProps
  }
);

export default PlasmicProductCard;
/* prettier-ignore-end */
